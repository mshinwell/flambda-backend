#**************************************************************************
#*                                                                        *
#*                 The Flambda backend project for OCaml                  *
#*                                                                        *
#*   Copyright 2020 Jane Street Group LLC                                 *
#*                                                                        *
#**************************************************************************

prefix=@prefix@
stage1_prefix=@stage1_prefix@
stage2_prefix=@stage2_prefix@
middle_end=@middle_end@
dune=@dune@

.PHONY: all stage0 stage1 stage2 install clean runtest runtest-upstream

.DEFAULT_GOAL := build

# How do we get the equivalent of "set -u" for the "rm -rf"...?

stage0:
	rm -rf _build0
	mkdir _build0
	rsync --hard-links --recursive \
	  --link-dest=$$(pwd)/_build0 $$(pwd)/ocaml/ $$(pwd)/_build0
	(cd _build0 && \
          ./configure --prefix=@stage0_prefix@ \
	    --disable-ocamldoc \
	    --disable-ocamltest \
	    --disable-instrumented-runtime \
	    --disable-shared \
	    --disable-debugger && \
	  make -j8 world.opt && \
	  make -j8 ocamlnat && \
	  make install \
	)

rebuild_stage0:
	echo foo

# We need to ensure that the ocaml/ directory is correctly configured
# especially when running incremental builds.  For example if we have just
# built stage2 and are now going back to stage1 again, we need to
# reconfigure, so that --prefix is set correctly.  We deal with this problem
# by a trick involving caching the config.status files, which enable us to
# immediately recreate the correct [configure] actions (e.g. writing
# ocaml/Makefile.config).  (N.B. ocaml-stage1-config.status is written by
# the configure script.)

# This should use build contexts instead of --build-dir.
stage1: stage0 ocaml-stage1-config.status
	cp ocaml-stage1-config.status ocaml/config.status
	(cd ocaml && ./config.status)
	# We need to augment dune's substitutions so this part isn't so difficult.
	# We use /bin/echo to avoid builtin variants of "echo" which don't
	# accept "-n".
	# Unfortunately if there are no NATDYNLINKOPS, we need to provide a
	# harmless option, otherwise dune will provide '' on the command line to
	# ocamlopt which causes an error.
	cat ocaml/Makefile.config \
	  | sed 's/^NATDYNLINKOPTS=$$/NATDYNLINKOPTS=-g/' \
	  | grep '^NATDYNLINKOPTS=' \
	  | sed 's/^[^=]*=\(.*\)/-ccopt\n"\1"/' \
      > ocaml/otherlibs/dynlink/natdynlinkops
	cat ocaml/otherlibs/dynlink/natdynlinkops \
		| sed 's/^/"/' | sed 's/$$/"/' \
		| xargs \
		| sed 's/^/(/' | sed 's/$$/)/' \
		> ocaml/ocamlbytecomp_library_flags.sexp
	/bin/echo -n $$(cat ocaml/Makefile.config \
	  | sed 's/^NATDYNLINKOPTS=$$/NATDYNLINKOPTS=-bin-annot/' \
	  | grep '^NATDYNLINKOPTS=' \
	  | sed 's/^[^=]*=\(.*\)/\1/') \
      > ocaml/otherlibs/dynlink/natdynlinkops2
	if [ "$$(cat ocaml/otherlibs/dynlink/natdynlinkops2)" != "-bin-annot" ]; \
	then \
	  /bin/echo -n "-ccopt" > ocaml/otherlibs/dynlink/natdynlinkops1; \
    else \
	  /bin/echo -n "-bin-annot" > ocaml/otherlibs/dynlink/natdynlinkops1; \
	fi
	PATH=$(stage0_prefix)/bin:$$PATH \
	$(dune) build --profile=release --build-dir=_build1 --verbose @install

ocaml-stage2-config.status: stage1 Makefile
	(cd ocaml && \
    ../ocaml-stage1-config.status && \
    ./configure -C \
      $$(grep CONFIGURE_ARGS Makefile.config | sed 's/^[A-Z_ ]*=//') \
      --prefix=$(prefix) && \
    cp config.status ../ocaml-stage2-config.status)

stage2: ocaml-stage2-config.status
	cp ocaml-stage2-config.status ocaml/config.status
	(cd ocaml && ./config.status)
	PATH=$(stage1_prefix)/bin:$$PATH \
      $(dune) build --profile=release --build-dir=_build2 --verbose @install

build: stage2

install:
	rm -rf $(prefix)
	mkdir -p $(prefix)
	# Work out how to tidy this up...
	if [ "$$(uname)" = "Darwin" ]; then \
      cp -rv $(stage2_prefix)/bin $(prefix); \
    fi
	if [ "$$(uname)" != "Darwin" ]; then \
      cp -Lrv $(stage2_prefix)/bin $(prefix); \
    fi
	if [ "$$(uname)" = "Darwin" ]; then \
      cp -rv $(stage2_prefix)/lib $(prefix); \
    fi
	if [ "$$(uname)" != "Darwin" ]; then \
      cp -Lrv $(stage2_prefix)/lib $(prefix); \
    fi
	ln -s $(prefix)/bin/ocamllex.opt $(prefix)/bin/ocamllex
	rm -f $(prefix)/bin/flambda_backend.main
	rm -f $(prefix)/bin/flambda_backend.main_native
	rm -rf $(prefix)/lib/ocaml-variants
	rm -rf $(prefix)/lib/stublibs
	rm -f $(prefix)/lib/ocaml/META
	rm -f $(prefix)/lib/ocaml/dune-package
	rm -f $(prefix)/lib/ocaml/compiler-libs/*.cmo
	cp $(prefix)/lib/ocaml/compiler-libs/topdirs.cmi $(prefix)/lib/ocaml
	cp $(prefix)/lib/ocaml/compiler-libs/topdirs.mli $(prefix)/lib/ocaml
	cp $(prefix)/lib/ocaml/compiler-libs/topdirs.cmt $(prefix)/lib/ocaml
	cp $(prefix)/lib/ocaml/compiler-libs/topdirs.cmti $(prefix)/lib/ocaml
	cp $(prefix)/lib/ocaml/compiler-libs/opttopdirs.cmi $(prefix)/lib/ocaml
	cp $(prefix)/lib/ocaml/compiler-libs/opttopdirs.mli $(prefix)/lib/ocaml
	cp $(prefix)/lib/ocaml/compiler-libs/opttopdirs.cmt $(prefix)/lib/ocaml
	cp $(prefix)/lib/ocaml/compiler-libs/opttopdirs.cmti $(prefix)/lib/ocaml
	# only .cmo files should be: main, optmain, topstart.

# stage2 is expected to have been built before runtest / runtest-upstream.
# We need some way of identifying what state the build tree is currently in
# perhaps (ready for stage1 or stage2)?

runtest:
	# It's a shame that dune needs the stage1 compiler on the path here.
	# Ideally that would be inaccessible within tests (to prevent mistakes
	# such as running "ocamlopt" rather than one of the stage2 binaries).
	PATH=$(stage1_prefix)/bin:$$PATH \
      $(dune) runtest --profile=release --build-dir=_build2 --verbose

runtest-upstream:
	rm -rf _runtest
	mkdir _runtest
	cp -a ocaml/testsuite _runtest/testsuite
	(cd _runtest && ln -s ../ocaml/Makefile.tools Makefile.tools)
	(cd _runtest && ln -s ../ocaml/Makefile.config Makefile.config)
	cp _build2/install/default/bin/* _runtest/
	# There seems to be an assumption that ocamlc/ocamlopt/ocamllex are
	# bytecode...
	cp -f _build2/install/default/bin/ocamlc.byte _runtest/ocamlc
	cp -f _build2/install/default/bin/ocamlopt.byte _runtest/ocamlopt
	mkdir _runtest/lex
	mv _runtest/ocamllex.byte _runtest/lex/ocamllex
	mkdir _runtest/yacc
	mv _runtest/ocamlyacc _runtest/yacc/
	(cd _runtest && ln -s ../_build2/default/ocaml/runtime runtime)
	(cd _runtest && ln -s ../_build2/install/default/lib/ocaml stdlib)
	# compilerlibs
	mkdir _runtest/compilerlibs
	cp _build2/install/default/lib/ocaml/compiler-libs/*.cma \
	  _runtest/compilerlibs
	cp _build2/install/default/lib/ocaml/compiler-libs/*.a \
	  _runtest/compilerlibs
	cp _build2/install/default/lib/ocaml/compiler-libs/*.cmxa \
	  _runtest/compilerlibs
	mkdir _runtest/toplevel
	cp _build2/default/ocaml/toplevel/.ocamltoplevel.objs/byte/*.cm* \
	  _runtest/toplevel/
	# Various directories are put on the -I paths by tools/Makefile;
	# utils/ is one such, so we just dump the .cm* files in there for
	# various things.
	mkdir _runtest/utils
	cp _build2/install/default/lib/ocaml/compiler-libs/*.cmi \
	  _runtest/utils
	cp _build2/install/default/lib/ocaml/compiler-libs/*.cmo \
	  _runtest/utils
	cp _build2/install/default/lib/ocaml/compiler-libs/*.cmx \
	  _runtest/utils
	cp _build2/install/default/lib/ocaml/*.cmi _runtest/utils
	cp _build2/install/default/lib/ocaml/*.cma _runtest/utils
	cp _build2/install/default/lib/ocaml/*.a _runtest/utils
	cp _build2/install/default/lib/ocaml/*.cmxa _runtest/utils
	cp _build2/default/ocaml/.ocamlcommon.objs/native/config.o _runtest/utils
	# Suppress linker errors about -I directories not existing.
	for dir in asmcomp bytecomp driver file_formats lambda middle_end \
      parsing typing; do ln -s utils _runtest/$$dir; done
	# dynlink
	mkdir -p _runtest/otherlibs/dynlink
	cp _build2/install/default/lib/ocaml/dynlink* \
      _runtest/otherlibs/dynlink
	# str
	mkdir -p _runtest/otherlibs/str
	cp _build2/install/default/lib/ocaml/stublibs/dllstr_stubs.so \
	  _runtest/otherlibs/str
	cp _build2/install/default/lib/ocaml/str*.cmi \
	  _runtest/otherlibs/str
	cp _build2/install/default/lib/ocaml/libstr*.a \
	  _runtest/otherlibs/str
	cp _build2/install/default/lib/ocaml/str*.cma \
	  _runtest/otherlibs/str
	cp _build2/install/default/lib/ocaml/str*.cmxa \
	  _runtest/otherlibs/str
	cp _build2/install/default/lib/ocaml/str*.a \
	  _runtest/otherlibs/str
	cp _build2/install/default/lib/ocaml/str*.cmx \
	  _runtest/otherlibs/str
	# unix
	mkdir -p _runtest/otherlibs/unix
	cp _build2/install/default/lib/ocaml/stublibs/dllunix_stubs.so \
	  _runtest/otherlibs/unix
	cp _build2/install/default/lib/ocaml/unix*.cmi \
	  _runtest/otherlibs/unix
	cp _build2/install/default/lib/ocaml/libunix*.a \
	  _runtest/otherlibs/unix
	cp _build2/install/default/lib/ocaml/unix*.cma \
	  _runtest/otherlibs/unix
	cp _build2/install/default/lib/ocaml/unix*.cmxa \
	  _runtest/otherlibs/unix
	cp _build2/install/default/lib/ocaml/unix*.a \
	  _runtest/otherlibs/unix
	cp _build2/install/default/lib/ocaml/unix*.cmx \
	  _runtest/otherlibs/unix
	# systhreads
	mkdir -p _runtest/otherlibs/systhreads
	cp _build2/install/default/lib/ocaml/stublibs/dllthreads_stubs.so \
	  _runtest/otherlibs/systhreads
	cp _build2/install/default/lib/ocaml/threads/*.cmi \
	  _runtest/otherlibs/systhreads
	cp _build2/install/default/lib/ocaml/threads/*.cma \
	  _runtest/otherlibs/systhreads
	cp _build2/install/default/lib/ocaml/threads/*.a \
	  _runtest/otherlibs/systhreads
	cp _build2/install/default/lib/ocaml/threads/*.cmxa \
	  _runtest/otherlibs/systhreads
	cp _build2/install/default/lib/ocaml/threads/*.cmx \
	  _runtest/otherlibs/systhreads
	# ocamldebug
	mkdir _runtest/debugger
	mv _runtest/ocamldebug _runtest/debugger
	cp _build2/default/ocaml/debugger/.main.eobjs/byte/*.cm* _runtest/debugger
	# The ast_invariants test needs VERSION to be present.  In fact ideally
	# we should have all the source files in _runtest too for this test, but
	# for the moment we accept it being a weaker check.  We're not working
	# on parts of the compiler that deal with the AST anyway in this repo.
	touch _runtest/VERSION
	# tools
	mkdir _runtest/tools
	cp _build2/default/ocaml/tools/ocamlmklib_byte.bc _runtest/tools/ocamlmklib
	cp _build2/default/ocaml/tools/ocamlobjinfo_byte.bc \
      _runtest/tools/ocamlobjinfo
	cp ./_build2/install/default/lib/ocaml/objinfo_helper _runtest/tools
	# ocamltest itself
	mkdir _runtest/ocamltest
	# This is deliberately run without a PATH setting so that the system
	# compiler is used, in case the new one is broken.  As such, we use the
	# stage1 build dir, not that from stage2.
	# This might be causing a spurious rebuild of the runtime
	$(dune) build --profile=release --build-dir=_build1 --verbose \
	  ocaml/tools/cmpbyt.bc
	$(dune) build --profile=release --build-dir=_build1 --verbose \
	  ocaml/ocamltest/ocamltest.byte
	cp _build1/default/ocaml/tools/cmpbyt.bc _runtest/tools/cmpbyt
	# We should build the native ocamltest too.
	cp _build1/default/ocaml/ocamltest/ocamltest.byte \
      _runtest/ocamltest/ocamltest
	# need otherlibs/unix/, toplevel/ and tools/
	(export OCAMLSRCDIR=$$(pwd)/_runtest; cd _runtest/testsuite \
      && if $$(which parallel > /dev/null 2>&1); \
         then make parallel; \
         else make all; \
         fi)
