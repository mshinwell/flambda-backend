;**************************************************************************
;*                                                                        *
;*                 The Flambda backend project for OCaml                  *
;*                                                                        *
;*                    Mark Shinwell, Jane Street Europe                   *
;*                                                                        *
;*   Copyright 2020 Jane Street Group LLC                                 *
;*                                                                        *
;**************************************************************************

;(include_subdirs unqualified)
;(library
; ; Analogously to the backend (see backend/dune) this is called
; ; ocamlmiddleend for the moment.
; (name ocamlmiddleend)
; (public_name flambda_backend.ocamlmiddleend)
; (wrapped false) ; also for compatibility with existing code
; (modes byte native)
; (flags (:standard -principal -nostdlib))
; (libraries stdlib ocamlcommon)
; (modules_without_implementation
;   cmx_format cmxs_format backend_intf inlining_decision_intf
;   simplify_boxed_integer_ops_intf)
; (modules
;   ;; middle_end/file_formats/
;   cmx_format cmxs_format
;
;   ;; middle_end/
;   backend_intf backend_var backend_var clambda clambda_primitives
;   compilation_unit compilenv convert_primitives internal_variable_names
;   linkage_name printclambda printclambda_primitives semantics_of_primitives
;   symbol variable
;
;   ;; middle_end/closure/
;   closure closure_middle_end
;
;   ;; middle_end/flambda/base_types/
;   closure_element closure_id closure_origin export_id id_types mutable_variable
;   set_of_closures_id set_of_closures_origin static_exception tag
;   var_within_closure
;
;   ;; middle_end/flambda/
;   alias_analysis allocated_const augment_specialised_args build_export_info
;   closure_conversion closure_conversion_aux closure_offsets effect_analysis
;   export_info export_info_for_pack extract_projections find_recursive_functions
;   flambda flambda_invariants flambda_iterators flambda_middle_end
;   flambda_to_clambda flambda_utils freshening import_approx inconstant_idents
;   initialize_symbol_to_let_symbol inline_and_simplify inline_and_simplify_aux
;   inlining_cost inlining_decision inlining_decision_intf inlining_stats
;   inlining_stats_types inlining_transforms invariant_params lift_code
;   lift_constants lift_let_to_initialize_symbol parameter pass_wrapper
;   projection ref_to_variables remove_free_vars_equal_to_args
;   remove_unused_arguments remove_unused_closure_vars
;   remove_unused_program_constructs share_constants simple_value_approx
;   simplify_boxed_integer_ops simplify_boxed_integer_ops_intf simplify_common
;   simplify_primitives traverse_for_exported_symbols un_anf unbox_closures
;   unbox_free_vars_of_closures unbox_specialised_args
; )
;)
;
;
